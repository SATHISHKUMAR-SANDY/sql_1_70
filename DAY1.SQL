-- CREATE DATABASE school;

-- USE school;

-- CREATE TABLE students(
-- ID INT PRIMARY KEY,
-- NAME VARCHAR(100),
-- AGE INT ,
-- DEPARTMENT VARCHAR(100)
-- );

-- SHOW tables;


-- TASK2


-- CREATE table COURSES(
-- COURSEID INT ,
-- TITLE varchar(100),
-- CREDITS INT
-- );
-- SHOW TABLES;




-- TASK3
-- select *
-- FROM STUDENTS

-- INSERT INTO STUDENTS (ID,NAME,AGE,DEPARTMENT)
-- VALUES
-- (1,"SATHISH",22,"BSC(IT)"),
-- (2,"SURESH",23,"CS");


-- SELECT *
-- FROM STUDENTS




-- TASK4


-- INSERT INTO COURSES(COURSE_ID,TITLE,CREDITS)
-- VALUES
-- (1,"DATA SCIENCE",3),
-- (2,"AWS",5);

-- SELECT *
-- FROM COURSES;




-- TASK 5

-- INSERT INTO STUDENTS(ID,NAME,AGE,DEPARTMENT)
-- VALUES
-- (3,"MUKESH",33,"MA"),
-- (4,"MURUGAN",30,"M.COM"),
-- (5,"SAKTHI",24,"B.COM"),
-- (6,"MAHA",19,"BA.ENGLISH");

-- SELECT *
-- FROM STUDENTS



--  Task 6

-- SELECT *
-- FROM STUDENTS;



-- TASK 7


-- SELECT NAME,AGE
-- FROM STUDENTS;


-- TASK8


-- SELECT DISTINCT AGE,NAME
-- FROM STUDENTS;


-- TASK 9

-- SELECT NAME,AGE
-- FROM STUDENTS
-- WHERE AGE=20;


-- TASK10

-- SELECT TITLE,CREDITS
-- FROM COURSES
-- WHERE CREDITS>3


-- TASK11

-- SELECT NAME,DEPARTMENT
-- FROM STUDENTS
-- WHERE DEPARTMENT = 'CS'


-- TASK12

-- SELECT AGE,NAME
-- FROM STUDENTS
-- WHERE AGE!=18

-- TASK13

-- SELECT NAME
-- FROM STUDENTS
-- WHERE NAME LIKE("S%")



-- TASK14
-- SELECT NAME
-- FROM STUDENTS
-- WHERE NAME LIKE ("%N%")


-- TASK15

-- SELECT NAME
-- FROM STUDENTS
-- WHERE NAME LIKE("S__DY")


-- TASK16
-- SELECT NAME,AGE
-- FROM STUDENTS
-- WHERE AGE>18 AND AGE<22

--  TASK17

-- SELECT COURSE_ID
-- FROM COURSES
-- WHERE COURSE_ID IN (101,102)


-- TASK18

-- SELECT NAME,DEPARTMENT
-- FROM STUDENTS
-- WHERE DEPARTMENT !='Physics';


-- TASK19

-- SELECT NAME,DEPARTMENT
-- FROM STUDENTS
-- WHERE DEPARTMENT IS NULL;




-- TASK 20

-- SELECT NAME,DEPARTMENT
-- FROM STUDENTS
-- WHERE DEPARTMENT IS NOT NULL


-- TASK21


-- SELECT NAME,DEPARTMENT
-- FROM STUDENTS
-- WHERE DEPARTMENT="MA" AND AGE>18

-- TASK22

-- SELECT NAME,DEPARTMENT
-- FROM STUDENTS
-- WHERE DEPARTMENT ="BIOLOGY" OR DEPARTMENT = "HEMISTRY"


-- TASK 23

-- SELECT NAME,DEPARTMENT,AGE
-- FROM STUDENTS
-- WHERE DEPARTMENT!="HISTORY" AND AGE<21

-- TASK 24

-- SELECT NAME
-- FROM STUDENTS
-- ORDER BY NAME ASC



-- TASK25


-- SELECT CREDITS
-- FROM COURSES
-- ORDER BY CREDITS DESC




-- TASK 26

-- SELECT DEPARTMENT,AGE
-- FROM STUDENTS
-- ORDER BY DEPARTMENT ASC,AGE DESC;


-- TASK 27

-- SELECT *
-- FROM STUDENTS
-- LIMIT 5



-- TASK28

-- SELECT *
-- FROM COURSES
-- ORDER BY CREDITS desc
-- LIMIT 3



-- TASK29

-- ALTER TABLE STUDENTS
-- ADD EMAIL VARCHAR(100)


-- TASK30

-- UPDATE STUDENTS
-- SET EMAIL = "SATHISH@HMAIL.COM"
-- WHERE ID =1;

-- SELECT * FROM STUDENTS;

-- TASK31
-- DELETE from STUDENTS
-- WHERE AGE>25 ;
-- SELECT * FROM STUDENTS;

-- TASK32

-- DELETE FROM courses
-- WHERE COURSE_ID =1;

-- SELECT * FROM COURSES;\


-- TASK 34

-- INSERT INTO students(ID,NAME,AGE,DEPARTMENT)
-- VALUES(8,"MANDY",44,NULL);
-- SELECT * FROM STUDENTS

-- TASK35

-- SELECT * FROM STUDENTS
-- WHERE DEPARTMENT IS NULL

-- TASK36
-- UPDATE  STUDENTS
-- SET DEPARTMENT = "COOK"
-- WHERE NAME = "SANDY";

-- SELECT * FROM STUDENTS

-- TASK 37

-- UPDATE STUDENTS
-- SET AGE = AGE+1
-- WHERE AGE IS NOT NULL;

-- SELECT * FROM STUDENTS 


-- TASK38


-- SELECT NAME
-- FROM STUDENTS
-- WHERE NAME LIKE("%A");



-- TASK 39

-- SELECT NAME
-- FROM STUDENTS
-- WHERE NAME LIKE("%AR%")


-- TASK40


-- SELECT AGE,DEPARTMENT
-- FROM STUDENTS
-- WHERE DEPARTMENT = 'Physics' OR DEPARTMENT = 'Mathematics'
-- ORDER BY AGE desc


-- TASK 41

-- SELECT distinct AGE
-- FROM STUDENTS
-- WHERE DEPARTMENT IS NOT NULL



-- TASK 42

-- SELECT * 
-- FROM STUDENTS
-- ORDER BY NAME
-- LIMIT 3





-- MINI 20 PROJECTS 

-- PROJECT 1


-- TASK43
-- DELETE FROM STUDENTS
-- WHERE DEPARTMENT IS NULL


-- 20 MINI PROJECTS


-- PROJECT 1

CREATE TABLE AUTHORS (
    AUTHOR_ID INT PRIMARY KEY,
    AUTHOR_NAME VARCHAR(100)
);

CREATE TABLE BOOKS (
    BOOK_ID INT PRIMARY KEY,
    BOOK_TITLE VARCHAR(100),
    AUTHOR_ID INT,
    FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHORS(AUTHOR_ID)
);


CREATE TABLE MEMBERS(
MEMBER_ID INT PRIMARY KEY,
NAME VARCHAR(100),
EMAIL VARCHAR(100),
JOIN_DATE DATE
);


CREATE TABLE LOANS(
LOADID INT PRIMARY KEY,
MEMBERID INT,
BOOKID INT,
LOANDATE DATE,
DUEDATE DATE,
RETURNDATE DATE,
FOREIGN KEY(MEMBERID) REFERENCES MEMBERS(MEMBER_ID),
FOREIGN KEY(BOOKID)  REFERENCES BOOKS(BOOK_ID)
);

INSERT INTO AUTHORS
VALUES
(1,"SATHISHKUMAR"),
(2,"SURESH"),
(3,"SURYA")

 











